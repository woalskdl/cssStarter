div.div {
  /* width: 200px; */
  /* height: 100px; */
	background-color: orange;
  border: #000 1px solid;
  margin: 10px 10px;
}
span.span {
  background-color: aquamarine;
  margin: 10px 10px;
}

/* 선택자 */
/* 인접 형제 선택자 - 선택자 첫번째 다음 형제 요소 하나를 선택 */
.orange + li {
  /* orange 클래스 요소의 다음 형제 요소 하나를 선택 */
  color: red;
}

/* 일반 형제 선택자 - 선택자 첫번째 다음 형제 모두 선택 */
.orange ~ li {
  /* orange 클래스 요소 뒤에오는 모든 형제 요소 선택 */
  color: red;
}

/* 가상 클래스 */
.orange:hover {
  color: black;
  /* 종류 */
  /* active : 마우스를 클릭하고 있는 동안 */
  /* focus : 포커스하는 동안 (포커스가 가능한 요소에 대해 - div 같은거는 attribute에 tabindex="-1" 을 넣으면 포커스 가능) */
}

.checkList {
  background: #f2f2f2;
}

/* 해당 선택자가 형제 요소 중 첫째라면 선택 (그 중 첫번째를 선택하는게 아님) */
.checkList span:first-child {
  color: red;
}

/* 해당 선택자가 형제 요소 중 막내라면 선택 (그 중 막내를 선택하는게 아님) */
.checkList div:last-child {
  color: red;
}

/* 선택자 형제 요소 중 n째라면 선택 - 배수 및 짝수 홀수 가능 */
.checkList li:nth-child(3n + 1) {
  text-decoration: underline;
}

/* 선택자 형제 요소 중 n째라면 선택 - 몇번째부터 선택 가능  */
.checkList li:nth-child(n + 2) {
  font-weight: 1000;
}

/* 선택자가 아닌 요소 선택  */
.checkList li:not(.check) {
  background: #000;
}

/* 가상 요소 선택자 */
/* 선택자 요소 내부 앞에 내용 삽입 */
.checkList::before {
  content: '리스트 앞 입니다.';
}

/* 선택자 요소 내부 뒤에 내용 삽입 */
.checkList::after {
  content: '리스트 뒤 입니다.';
}

/* 속성 선택자 */
.checkList [disabled] {
  background: royalblue;
}

/* ================================== */
/* 상속되는 속성은 대부분 글자와 관련된 요소 */

/* 단위 */
div.something {
  width: 1px;
  width: 1%;
  width: 1em; /* 요소의 글꼴 크기 - ex. 기본 글꼴 크기가 10px이라면 1em = 10px */
  width: 1rem; /* 루트 요소(html, 최상위 요소)의 글꼴 크기 */
  width: 1vw; /* 뷰포트 가로 너비의 백분율 */
  width: 1vh; /* 뷰포트 세로 너비의 백분율 */
}

/* 여백 */
/* margin : 외부 여백 */
div.margin {
  margin: 10px 20px; /* 상하, 좌우 */
  margin: 10px 20px 30px; /* 상 좌우 하 (위에서부터 아래로) */
  margin: 10px 20px 30px 40px; /* 상 우 하 좌 (시계방향) */
}

/* padding : 내부 여백 - 요소 자체의 크기도 늘어난다. */

/* border : 선 두께 선 종류 선 색상 - 이 순서로 입력하는게 좋다. / 요소의 크기도 늘어난다. */
div.border {
  border: 1px 2px 1px solid black transparent;  /* 두께, 종류, 색상도 상하좌우 동일하게 입력 가능 / transparent 투명 */
}

/* box-sizing*/
div.box-sizing {
  box-sizing: border-box; /* 명시된 가로 세로 너비가 테두리를 고려하여 적용 (테두리에 의해 요소가 커지지 않도록) */
  box-sizing: content-box; /* 명시된 가로 세로 너비가 내용을 고려하여 적용 (default) */
}

/* overflow - default : visible*/
div.overflow {
  overflow: hidden; /* 숨기기 */
  overflow: scroll; /* 무조건 스크롤 */
  overflow: auto;   /* 넘치면 스크롤 */
}

/* display */
div.display {
  display: inline-block;  /* inline(글자)이지만 가로, 세로 값을 지정할 수 있음 */
  display: flex;  /* 1차원 레이아웃 - 수직 정렬 */
  display: grid;  /* 2차원 레이아웃 */
}

/* font-family - 글꼴 후보 지정, 글꼴 계열은 필수 지정 > 후보 중 가능한 가장 첫번째 글꼴 사용 (브라우저 환경에 따라) */
/* 폰트명에 띄워쓰기가 있으면 ""로 감싸기 */

/* 배치 - absolute, fixed 가 지정된 요소는 display 속성이 block으로 변경된다. */
div.position {
  position: static;   /* 기준 없음 - default */
  position: relative; /* 요소 자신을 기준 
  - position 설정하지 않았다면 자기가 원래 있었던 곳을 기준 
  > 실제로 요소는 원래 위치에 있지만, 보여지는 것만 이동 
  > 위치를 조정하는데 쓰이기보단 absolute의 부모로 지정하는데 많이 사용 */
  position: absolute; /* 위치 상 부모 요소 기준 
  - 부모 요소를 기준으로 하기 때문에 위치가 부모 요소를 기준으로 하며 붕뜨는 개념으로 자리잡음. 
  > 형제 요소와의 위치 상호작용이 무너진다. 
  > 위치 상 부모 요소이며, position을 가지는 부모 요소가 기준이다. 따라서 실제 HTML구조 상 부모가 아닐 수도 있다.
  > 부모 요소에 position : relative 가 있는 것을 기준 / static(default) 값은 기준이 없기 때문에 위치가 없는 것 */
  position: fixed;    /* 뷰포트 기준 - 헤더, 툴바 등을 표현하는데 많이 사용됨. 스크롤과 무관하게 고정 */

  /* 기준을 잡은 뒤 위치값을 설정한다. 음수도 사용 가능 */
  top: auto;      /* 위에서부터 얼마나 떨어졌나 */
  bottom: auto;   /* 아래에서부터 얼마나 떨어졌나 */
  left: auto;     /* 왼쪽에서부터 얼마나 떨어졌나 */
  right: auto;    /* 오른쪽에서부터 얼마나 떨어졌나 */
  z-index: auto;
  /* 요소 쌓임 순서 */
  /* 1. 요소에 position 속상 값이 있는 경우 더 위에 쌓인다. 기존 static 제외 */
  /* 2. position 속성값과 z-index가 같으면 HTML 구조 상 다음에 있는 요소가 위에 쌓임 */
  /* z-index가 있어도 position값이 없으면 적용 안됨 */
}

h6 {
  font-size: 24px;
  font-weight: 600;
  margin: 20px;
}

/* flex - 1차원 레이아웃 */
div.flex {
  display: flex;  /* 블록 요소와 같이 Flex container 정의 >> 현재 요소는 flex container가 된다. */
  /* display: inline-flex; */ /* inline 요소(가로사이즈가 줄어들려고 함)와 같이 Flex container 정의 */

  /* flex-direction: row; */  /* (default) 행축 (좌 > 우) - column 값은 열축 (위 > 아래) 이지만 굳이 flex를 정의한 이상 잘 사용하지 않는다. */
  /* flex-direction: row-reverse; */ /* 거꾸로 */
  
  /* flex-items 묶음(줄 바꿈) 여부 */
  /* flex-wrap: nowrap; */  /* (default) 묶음(줄 바꿈) 없음 > width가 넘치면 자식 요소 가로가 수축됨 */
  flex-wrap: wrap;    /* 여러 줄로 묶음 */

  /* 주 축의 정렬 방법 */
  /* justify-content: flex-start; */  /* (default) Flex Items를 시작점으로 정렬 */
  /* justify-content: flex-end; */    /* Flex Items를 끝점으로 정렬 */
  justify-content: center;     /* Flex Items를 가운데 정렬 */
  /* justify-content: space-between; */ /* 각 아이템 사이를 균등하게 정렬 */
  /* justify-content: space-around; */  /* 각 아이템의 외부 여백을 균등하게 정렬 */

  /* 교차 축의 여러 줄 정렬 방법 (일반적으로 수직) - 한 줄일때는 동작하지 않는다. */
  align-content: stretch; /* (default) 아이템을 시작점으로 정렬 - 수직 높이 선언이 없으면 세로가 최대한 늘어남 
  / 이 외의 값은 justify-content와 between, around 빼고 동일 */

  /* 교차 축의 한 줄 정렬 방법 - 보통 여러 줄을 관리하지 않아서 이를 더 많이 사용한다. */
  align-items: stretch; /* (default) 아이템을 교차 축으로 늘림 
  / 이 외의 값은 justify-content와 between, around 빼고 동일 */

  width: 400px;
  height: 500px;
  background-color: royalblue;
}
/* flex container의 아이템들 */
div.flex-item {
  /* 아이템의 증가 너비 비율 - Flex Container 너비에 따라 증가 비율 적용 */
  flex-grow: 1; /* (default = 0) 아이템들이 각각 동일한 비율로 늘어난다 */
  /* 아이템의 감소 너비 비율 - Flex Container 너비에 따라 감소 비율 적용 */
  flex-shrink: 1; /* (default) - 0으로 하면 container 너비에 따라 줄어들지 않는다. */
  /* 아이템 공간 배분 전 기본 너비 */
  flex-basis: 0;  /* (default = auto : 요소의 Content 너비) 늘어나는 기본값 잡기 */
  /* 정렬 순서 */
  order: 0; /* (default) 순서 없음 / 숫자가 작을수록 먼저 */

  width: 100px;
  height: 100px;
  border: 3px dashed red;
  background-color: orange;
}
div.flex-item:nth-child(3) {
  flex-grow: 2; /* 다른 아이템의 2배 */
}

/* 전환 */
div.transition {
  /* 요소의 전환(시작과 끝) 효과를 지정하는 단축 속성 */
  transition: width 1s .5s, background-color 2s; /* 속성명 지속시간(필수) 타이밍함수 대기시간 */
  /* transition-property: all; */ /* (default) 모든 속성에 적용 - 위에서 색깔은 바로 변함 */
  /* transition-duration : 0s */ /* (default) 지속시간 */
  transition-timing-function: ease; /* (default) 느리게 - 빠르게 - 느리게 / 전환 효과의 타이밍 함수를 지정 
  / 굉장히 다양하므로 필요하면 easing functions 구글링, mdn, 다양한 툴도 있음 */
  /* transition-delay: .5s; */ /* 대기시간 - transition에 duration 뒤에 시간 또 넣으면 그게 대기시간 */

  width: 100px;
  height: 100px;
  background-color: orange;
}

div.transition:hover {
  width: 300px;
  background-color: royalblue;
}

/* 변환 */
div.transform-container {
  width: 100px;
  height: 100px;
  background-color: royalblue;
}

div.transform {
  /* 원근법 이동 크기 회전 기울임 */
  transform: rotate(45deg) scale(1.3) skewX(45deg);  
  /* translate(이동), scale(크기), rotate(회전), skew(기울임 - X, Y 붙여서 씀), perspective (원근거리 - 3D / 제일 앞에 써야함) */

  width: 100px;
  height: 100px;
  background-color: orange;
}